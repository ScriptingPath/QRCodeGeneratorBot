import os
import traceback
import sys

try:
    import qrcode
except ImportError:
    question = input(
        "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë? (y/n): ")
    if (question == "y"):
        if os.system("pip install qrcode") == 0:
            print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            try:
                import qrcode
            except ImportError:
                print(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É qrcode. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
                input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É qrcode. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    else:
        print("–ë–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit()


from io import BytesIO

try:
    from colorama import Fore, init
except ImportError:
    question = input(
        "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ colorama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë? (y/n): ")
    if (question == "y"):
        if os.system("pip install colorama") == 0:
            print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ colorama —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            try:
                from colorama import Fore, init
            except ImportError:
                print(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É colorama. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
                input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É colorama. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    else:
        print("–ë–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ colorama –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit()

try:
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.utils import executor
    from aiogram.types import ReplyKeyboardMarkup
except ImportError:
    question = input(
        "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë? (y/n): ")
    if (question == "y"):
        if os.system("pip install aiogram") == 0:
            print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            try:
                from aiogram import Bot, Dispatcher, executor, types
                from aiogram.utils import executor
            except ImportError:
                print(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É aiogram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
                input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É aiogram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    else:
        print("–ë–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        input("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit()

init(autoreset=True)
token = os.getenv("TOKEN")

if token is None:
    token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –±–æ—Ç–µ @BotFather): ")

bot = Bot(token=token)
dp = Dispatcher(bot)

count = 0
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add("üíø –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")


async def on_startup(_):
    print(Fore.LIGHTWHITE_EX + "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


@dp.message_handler(commands=["start", "help"])
async def start_command(msg: types.Message):
    await msg.reply("*üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å QR-–∫–æ–¥—ã –∏–∑ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç.*", parse_mode="markdown", reply_markup=start_keyboard, reply=False)

@dp.message_handler()
async def on_message(msg: types.Message):
    if (msg.text == "üíø –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        await msg.reply("*‚ô¶ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å QR-–∫–æ–¥—ã. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç —Å —ç—Ç–∏–º –±–æ—Ç–æ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É.*", parse_mode="markdown", reply=False)
    else:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª —Å–æ–∑–¥–∞—Ç—å qr-–∫–æ–¥
        global count
        count += 1
        if len(msg.text) < 500:
            print(Fore.LIGHTBLUE_EX +
                f"\n\n[{count}] ‚Äì –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.full_name} (ID: {msg.from_user.id}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(msg.text)})")
            status = await msg.reply("‚öô –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥...", reply=False)

            try:
                print(Fore.LIGHTBLUE_EX +
                    f"""[{count}] ‚Äì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ "{msg.text}"..""")
                img = qrcode.make(msg.text)

                print(Fore.LIGHTBLUE_EX +
                    f"[{count}] ‚Äì –°–æ—Ö—Ä–∞–Ω—è—é QR-–∫–æ–¥ –≤ –ø–∞–º—è—Ç—å..")
                bio = BytesIO()
                bio.name = 'qr.jpeg'
                img.save(bio, "jpeg")
                bio.seek(0)

                print(Fore.LIGHTBLUE_EX +
                    f"[{count}] ‚Äì –û—Ç–ø—Ä–∞–≤–ª—è—é QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.from_user.full_name} (ID: {msg.from_user.id})")
                await msg.reply_photo(photo=bio, reply=False)
                await status.edit_text("*‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!*", parse_mode="markdown")

                print(Fore.LIGHTBLUE_EX +
                    f"[{count}] ‚Äì –£–¥–∞–ª—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏..")
                
                del bio
                del img
                del status

                print(Fore.LIGHTWHITE_EX +
                    f"[{count}] ‚Äì QR-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.full_name} (ID: {msg.from_user.id}) —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return
            except Exception as ex:
                print(Fore.LIGHTRED_EX +
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.full_name} (ID: {msg.from_user.id}):\n{traceback.format_exc().strip()}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: {msg}")
                await status.edit_text("*‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.*", parse_mode="markdown")
        else:
            print(Fore.LIGHTCYAN_EX +
                f"\n[{count}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.full_name} (ID: {msg.from_user.id}) –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è (> 500)")
            await msg.reply("*‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: 500*", parse_mode="markdown")

while True:
    while True:
        try:
            executor.start_polling(
                dp, skip_updates=False, on_startup=on_startup)
        except Exception as ex:
            print(traceback.format_exc())
